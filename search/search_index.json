{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"1.node_collector_processor/","text":"You can use the NodesCollectorProcessor class in both Python and the command line: Python Script Example You can use the NodesCollectorProcessor class within a Python script as follows: from chemgraphbuilder.nodes_collector_processor import NodesCollectorProcessor from chemgraphbuilder.setup_data_folder import SetupDataFolder # Set the connection details and parameters uri = \"bolt://localhost:7689\" username = \"neo4j\" password = \"your_password\" node_type = \"Compound\" # Change to \"BioAssay\", \"Gene\", or \"Protein\" as needed enzyme_list = ['CYP2D6', 'CYP3A4'] # Initialize and setup the data directory setup_folder = SetupDataFolder() setup_folder.setup() # Initialize the collector collector = NodesCollectorProcessor(uri=uri, username=username, password=password, node_type=node_type, enzyme_list=enzyme_list) # Collect and process the data collector.collect_and_process_data() # Close the connection collector.close() Command Line Interface (CLI) Example You can use the NodesCollectorProcessor class from the command line by executing the script with the necessary arguments: setup-data-folder collect-process-nodes --uri bolt://localhost:7689 --username neo4j --password your_password --node_type Compound --enzyme_list CYP2D6,CYP3A4 Make sure to replace \"your_password\" with the actual password for your Neo4j database. The node_type argument can be one of \"Compound\" , \"BioAssay\" , \"Gene\" , or \"Protein\" , depending on the type of data you want to collect. The enzyme_list should be a comma-separated string of enzyme names.","title":"Step1"},{"location":"1.node_collector_processor/#python-script-example","text":"You can use the NodesCollectorProcessor class within a Python script as follows: from chemgraphbuilder.nodes_collector_processor import NodesCollectorProcessor from chemgraphbuilder.setup_data_folder import SetupDataFolder # Set the connection details and parameters uri = \"bolt://localhost:7689\" username = \"neo4j\" password = \"your_password\" node_type = \"Compound\" # Change to \"BioAssay\", \"Gene\", or \"Protein\" as needed enzyme_list = ['CYP2D6', 'CYP3A4'] # Initialize and setup the data directory setup_folder = SetupDataFolder() setup_folder.setup() # Initialize the collector collector = NodesCollectorProcessor(uri=uri, username=username, password=password, node_type=node_type, enzyme_list=enzyme_list) # Collect and process the data collector.collect_and_process_data() # Close the connection collector.close()","title":"Python Script Example"},{"location":"1.node_collector_processor/#command-line-interface-cli-example","text":"You can use the NodesCollectorProcessor class from the command line by executing the script with the necessary arguments: setup-data-folder collect-process-nodes --uri bolt://localhost:7689 --username neo4j --password your_password --node_type Compound --enzyme_list CYP2D6,CYP3A4 Make sure to replace \"your_password\" with the actual password for your Neo4j database. The node_type argument can be one of \"Compound\" , \"BioAssay\" , \"Gene\" , or \"Protein\" , depending on the type of data you want to collect. The enzyme_list should be a comma-separated string of enzyme names.","title":"Command Line Interface (CLI) Example"},{"location":"2.relationship_collector_processor/","text":"Relationship Collector and Processor This module collects and processes relationship data for different types of relationships using the RelationshipPropertiesExtractor and RelationshipDataProcessor classes. Available Relationship Types Assay_Compound Assay_Enzyme Gene_Enzyme Compound_Gene Compound_Similarity Compound_Cooccurrence Compound_Transformation Usage Examples Python To use the RelationshipCollectorProcessor class in Python, follow the example below: from relationship_collector_processor import RelationshipCollectorProcessor # Set the relationship type relationship_type = \"Assay_Compound\" # Change to the desired relationship type # Initialize the collector collector = RelationshipCollectorProcessor(relationship_type=relationship_type) # Collect and process the relationship data collector.collect_relationship_data() Command Line To collect and process relationship data from the command line, use the following command: # Collect and process the relationship data for the specified relationship type collect-process-relationships --relationship_type Assay_Compound Replace Assay_Compound with any of the available relationship types to collect different data.","title":"Step2"},{"location":"2.relationship_collector_processor/#relationship-collector-and-processor","text":"This module collects and processes relationship data for different types of relationships using the RelationshipPropertiesExtractor and RelationshipDataProcessor classes.","title":"Relationship Collector and Processor"},{"location":"2.relationship_collector_processor/#available-relationship-types","text":"Assay_Compound Assay_Enzyme Gene_Enzyme Compound_Gene Compound_Similarity Compound_Cooccurrence Compound_Transformation","title":"Available Relationship Types"},{"location":"2.relationship_collector_processor/#usage-examples","text":"","title":"Usage Examples"},{"location":"2.relationship_collector_processor/#python","text":"To use the RelationshipCollectorProcessor class in Python, follow the example below: from relationship_collector_processor import RelationshipCollectorProcessor # Set the relationship type relationship_type = \"Assay_Compound\" # Change to the desired relationship type # Initialize the collector collector = RelationshipCollectorProcessor(relationship_type=relationship_type) # Collect and process the relationship data collector.collect_relationship_data()","title":"Python"},{"location":"2.relationship_collector_processor/#command-line","text":"To collect and process relationship data from the command line, use the following command: # Collect and process the relationship data for the specified relationship type collect-process-relationships --relationship_type Assay_Compound Replace Assay_Compound with any of the available relationship types to collect different data.","title":"Command Line"},{"location":"3.graph_nodes_loader/","text":"The GraphNodesLoader class is usable from Python code, and the command line interface. Usage in Different Contexts Available Relationships Compound BioAssay Gene Protein 1. Python Code from chemgraphbuilder.graph_nodes_loader import GraphNodesLoader # User-provided connection details and label uri = \"bolt://localhost:7687\" username = \"neo4j\" password = \"password\" label = \"Compound\" # you can add other labels such as (BioAssay, Gene, Protein) graph_nodes_loader = GraphNodesLoader(uri, username, password) graph_nodes_loader.load_data_for_node_type(label) 2. Command Line After installing the package using pip install . or pip install chemgraphbuilder , you can use the command-line interface: load-graph-nodes --uri bolt://localhost:7687 --username neo4j --password password --label Compound","title":"Step3"},{"location":"3.graph_nodes_loader/#the-graphnodesloader-class-is-usable-from-python-code-and-the-command-line-interface","text":"","title":"The GraphNodesLoader class is usable from Python code, and the command line interface."},{"location":"3.graph_nodes_loader/#usage-in-different-contexts","text":"","title":"Usage in Different Contexts"},{"location":"3.graph_nodes_loader/#available-relationships","text":"Compound BioAssay Gene Protein","title":"Available Relationships"},{"location":"3.graph_nodes_loader/#1-python-code","text":"from chemgraphbuilder.graph_nodes_loader import GraphNodesLoader # User-provided connection details and label uri = \"bolt://localhost:7687\" username = \"neo4j\" password = \"password\" label = \"Compound\" # you can add other labels such as (BioAssay, Gene, Protein) graph_nodes_loader = GraphNodesLoader(uri, username, password) graph_nodes_loader.load_data_for_node_type(label)","title":"1. Python Code"},{"location":"3.graph_nodes_loader/#2-command-line","text":"After installing the package using pip install . or pip install chemgraphbuilder , you can use the command-line interface: load-graph-nodes --uri bolt://localhost:7687 --username neo4j --password password --label Compound","title":"2. Command Line"},{"location":"4.graph_relationships_loader/","text":"The GraphRelationshipsLoader class is usable from Python code, and the command line interface. Usage in Different Contexts Available Relationships Assay_Gene Assay_Compound Compound_Gene Compound_Transformation Gene_Enzyme Compound_Similarities Cpd_Cpd_CoOccurence Cpd_Gene_CoOccurence 1. Python Code from chemgraphbuilder.graph_relationships_loader import GraphRelationshipsLoader uri = \"bolt://localhost:7687\" username = \"neo4j\" password = \"password\" loader = GraphRelationshipsLoader(uri, username, password) loader.add_relationships(\"Assay_Gene\") loader.close() 2. Command Line After installing the package using pip install . or pip install chemgraphbuilder , you can use the command-line interface: load-graph_relationships --uri bolt://localhost:7687 --username neo4j --password password --relationship_type Assay_Gene","title":"Step4"},{"location":"4.graph_relationships_loader/#the-graphrelationshipsloader-class-is-usable-from-python-code-and-the-command-line-interface","text":"","title":"The GraphRelationshipsLoader class is usable from Python code, and the command line interface."},{"location":"4.graph_relationships_loader/#usage-in-different-contexts","text":"","title":"Usage in Different Contexts"},{"location":"4.graph_relationships_loader/#available-relationships","text":"Assay_Gene Assay_Compound Compound_Gene Compound_Transformation Gene_Enzyme Compound_Similarities Cpd_Cpd_CoOccurence Cpd_Gene_CoOccurence","title":"Available Relationships"},{"location":"4.graph_relationships_loader/#1-python-code","text":"from chemgraphbuilder.graph_relationships_loader import GraphRelationshipsLoader uri = \"bolt://localhost:7687\" username = \"neo4j\" password = \"password\" loader = GraphRelationshipsLoader(uri, username, password) loader.add_relationships(\"Assay_Gene\") loader.close()","title":"1. Python Code"},{"location":"4.graph_relationships_loader/#2-command-line","text":"After installing the package using pip install . or pip install chemgraphbuilder , you can use the command-line interface: load-graph_relationships --uri bolt://localhost:7687 --username neo4j --password password --relationship_type Assay_Gene","title":"2. Command Line"}]}